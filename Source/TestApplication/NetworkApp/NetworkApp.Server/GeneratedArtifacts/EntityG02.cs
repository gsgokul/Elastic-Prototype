

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
    public sealed partial class Practice : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the Practice entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Practice()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Practice(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Practice> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.Practice.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Practice_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Practice_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Id
        {
            get
            {
                return global::LightSwitchApplication.Practice.DetailsClass.GetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Id);
            }
            set
            {
                global::LightSwitchApplication.Practice.DetailsClass.SetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Id, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Id_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            get
            {
                return global::LightSwitchApplication.Practice.DetailsClass.GetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Name);
            }
            set
            {
                global::LightSwitchApplication.Practice.DetailsClass.SetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Name, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Name_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1
        {
            get
            {
                return global::LightSwitchApplication.Practice.DetailsClass.GetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Address1);
            }
            set
            {
                global::LightSwitchApplication.Practice.DetailsClass.SetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Address1, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Address1_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Address1_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Address1_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2
        {
            get
            {
                return global::LightSwitchApplication.Practice.DetailsClass.GetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Address2);
            }
            set
            {
                global::LightSwitchApplication.Practice.DetailsClass.SetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Address2, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Address2_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Address2_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Address2_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string City
        {
            get
            {
                return global::LightSwitchApplication.Practice.DetailsClass.GetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.City);
            }
            set
            {
                global::LightSwitchApplication.Practice.DetailsClass.SetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.City, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void City_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void City_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void City_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string State
        {
            get
            {
                return global::LightSwitchApplication.Practice.DetailsClass.GetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.State);
            }
            set
            {
                global::LightSwitchApplication.Practice.DetailsClass.SetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.State, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void State_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void State_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void State_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Country
        {
            get
            {
                return global::LightSwitchApplication.Practice.DetailsClass.GetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Country);
            }
            set
            {
                global::LightSwitchApplication.Practice.DetailsClass.SetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Country, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<long> Npi
        {
            get
            {
                return global::LightSwitchApplication.Practice.DetailsClass.GetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Npi);
            }
            set
            {
                global::LightSwitchApplication.Practice.DetailsClass.SetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Npi, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Npi_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Npi_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Npi_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Nullable<int> Tin
        {
            get
            {
                return global::LightSwitchApplication.Practice.DetailsClass.GetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Tin);
            }
            set
            {
                global::LightSwitchApplication.Practice.DetailsClass.SetValue(this, global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Tin, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tin_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tin_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Tin_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.Practice,
                global::LightSwitchApplication.Practice.DetailsClass,
                global::LightSwitchApplication.Practice.DetailsClass.IImplementation,
                global::LightSwitchApplication.Practice.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Id;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass>.Entry
                __PracticeEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass>.Entry(
                    global::LightSwitchApplication.Practice.DetailsClass.__Practice_CreateNew,
                    global::LightSwitchApplication.Practice.DetailsClass.__Practice_Created,
                    global::LightSwitchApplication.Practice.DetailsClass.__Practice_AllowSaveWithErrors);
            private static global::LightSwitchApplication.Practice __Practice_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Practice> es)
            {
                return new global::LightSwitchApplication.Practice(es);
            }
            private static void __Practice_Created(global::LightSwitchApplication.Practice e)
            {
                e.Practice_Created();
            }
            private static bool __Practice_AllowSaveWithErrors(global::LightSwitchApplication.Practice e)
            {
                bool result = false;
                e.Practice_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.Practice.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, int> Id
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Id) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string> Name
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Name) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string> Address1
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Address1) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string> Address2
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Address2) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string> City
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.City) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string> State
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.State) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string> Country
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Country) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<long>> Npi
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Npi) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<long>>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<int>> Tin
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties.Tin) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<int>>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int Id { get; set; }
                new string Name { get; set; }
                new string Address1 { get; set; }
                new string Address2 { get; set; }
                new string City { get; set; }
                new string State { get; set; }
                new string Country { get; set; }
                new global::System.Nullable<long> Npi { get; set; }
                new global::System.Nullable<int> Tin { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "14.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, int>.Entry
                    Id = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, int>.Entry(
                        "Id",
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Id_Stub,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Id_ComputeIsReadOnly,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Id_Validate,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Id_GetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Id_SetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Id_OnValueChanged);
                private static void _Id_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Practice.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, int>.Data> c, global::LightSwitchApplication.Practice.DetailsClass d, object sf)
                {
                    c(d, ref d._Id, sf);
                }
                private static bool _Id_ComputeIsReadOnly(global::LightSwitchApplication.Practice e)
                {
                    bool result = false;
                    e.Id_IsReadOnly(ref result);
                    return result;
                }
                private static void _Id_Validate(global::LightSwitchApplication.Practice e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Id_Validate(r);
                }
                private static int _Id_GetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d)
                {
                    return d.ImplementationEntity.Id;
                }
                private static void _Id_SetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d, int v)
                {
                    d.ImplementationEntity.Id = v;
                }
                private static void _Id_OnValueChanged(global::LightSwitchApplication.Practice e)
                {
                    e.Id_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry
                    Name = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry(
                        "Name",
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Name_Stub,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Name_ComputeIsReadOnly,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Name_Validate,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Name_GetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Name_SetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Name_OnValueChanged);
                private static void _Name_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Practice.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data> c, global::LightSwitchApplication.Practice.DetailsClass d, object sf)
                {
                    c(d, ref d._Name, sf);
                }
                private static bool _Name_ComputeIsReadOnly(global::LightSwitchApplication.Practice e)
                {
                    bool result = false;
                    e.Name_IsReadOnly(ref result);
                    return result;
                }
                private static void _Name_Validate(global::LightSwitchApplication.Practice e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Name_Validate(r);
                }
                private static string _Name_GetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d)
                {
                    return d.ImplementationEntity.Name;
                }
                private static void _Name_SetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Name = v;
                }
                private static void _Name_OnValueChanged(global::LightSwitchApplication.Practice e)
                {
                    e.Name_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry
                    Address1 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry(
                        "Address1",
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address1_Stub,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address1_ComputeIsReadOnly,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address1_Validate,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address1_GetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address1_SetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address1_OnValueChanged);
                private static void _Address1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Practice.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data> c, global::LightSwitchApplication.Practice.DetailsClass d, object sf)
                {
                    c(d, ref d._Address1, sf);
                }
                private static bool _Address1_ComputeIsReadOnly(global::LightSwitchApplication.Practice e)
                {
                    bool result = false;
                    e.Address1_IsReadOnly(ref result);
                    return result;
                }
                private static void _Address1_Validate(global::LightSwitchApplication.Practice e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Address1_Validate(r);
                }
                private static string _Address1_GetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d)
                {
                    return d.ImplementationEntity.Address1;
                }
                private static void _Address1_SetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Address1 = v;
                }
                private static void _Address1_OnValueChanged(global::LightSwitchApplication.Practice e)
                {
                    e.Address1_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry
                    Address2 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry(
                        "Address2",
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address2_Stub,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address2_ComputeIsReadOnly,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address2_Validate,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address2_GetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address2_SetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Address2_OnValueChanged);
                private static void _Address2_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Practice.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data> c, global::LightSwitchApplication.Practice.DetailsClass d, object sf)
                {
                    c(d, ref d._Address2, sf);
                }
                private static bool _Address2_ComputeIsReadOnly(global::LightSwitchApplication.Practice e)
                {
                    bool result = false;
                    e.Address2_IsReadOnly(ref result);
                    return result;
                }
                private static void _Address2_Validate(global::LightSwitchApplication.Practice e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Address2_Validate(r);
                }
                private static string _Address2_GetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d)
                {
                    return d.ImplementationEntity.Address2;
                }
                private static void _Address2_SetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Address2 = v;
                }
                private static void _Address2_OnValueChanged(global::LightSwitchApplication.Practice e)
                {
                    e.Address2_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry
                    City = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry(
                        "City",
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._City_Stub,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._City_ComputeIsReadOnly,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._City_Validate,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._City_GetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._City_SetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._City_OnValueChanged);
                private static void _City_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Practice.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data> c, global::LightSwitchApplication.Practice.DetailsClass d, object sf)
                {
                    c(d, ref d._City, sf);
                }
                private static bool _City_ComputeIsReadOnly(global::LightSwitchApplication.Practice e)
                {
                    bool result = false;
                    e.City_IsReadOnly(ref result);
                    return result;
                }
                private static void _City_Validate(global::LightSwitchApplication.Practice e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.City_Validate(r);
                }
                private static string _City_GetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d)
                {
                    return d.ImplementationEntity.City;
                }
                private static void _City_SetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d, string v)
                {
                    d.ImplementationEntity.City = v;
                }
                private static void _City_OnValueChanged(global::LightSwitchApplication.Practice e)
                {
                    e.City_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry
                    State = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry(
                        "State",
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._State_Stub,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._State_ComputeIsReadOnly,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._State_Validate,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._State_GetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._State_SetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._State_OnValueChanged);
                private static void _State_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Practice.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data> c, global::LightSwitchApplication.Practice.DetailsClass d, object sf)
                {
                    c(d, ref d._State, sf);
                }
                private static bool _State_ComputeIsReadOnly(global::LightSwitchApplication.Practice e)
                {
                    bool result = false;
                    e.State_IsReadOnly(ref result);
                    return result;
                }
                private static void _State_Validate(global::LightSwitchApplication.Practice e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.State_Validate(r);
                }
                private static string _State_GetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d)
                {
                    return d.ImplementationEntity.State;
                }
                private static void _State_SetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d, string v)
                {
                    d.ImplementationEntity.State = v;
                }
                private static void _State_OnValueChanged(global::LightSwitchApplication.Practice e)
                {
                    e.State_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry
                    Country = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Entry(
                        "Country",
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Country_Stub,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Country_ComputeIsReadOnly,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Country_Validate,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Country_GetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Country_SetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Country_OnValueChanged);
                private static void _Country_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Practice.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data> c, global::LightSwitchApplication.Practice.DetailsClass d, object sf)
                {
                    c(d, ref d._Country, sf);
                }
                private static bool _Country_ComputeIsReadOnly(global::LightSwitchApplication.Practice e)
                {
                    bool result = false;
                    e.Country_IsReadOnly(ref result);
                    return result;
                }
                private static void _Country_Validate(global::LightSwitchApplication.Practice e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Country_Validate(r);
                }
                private static string _Country_GetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d)
                {
                    return d.ImplementationEntity.Country;
                }
                private static void _Country_SetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Country = v;
                }
                private static void _Country_OnValueChanged(global::LightSwitchApplication.Practice e)
                {
                    e.Country_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<long>>.Entry
                    Npi = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<long>>.Entry(
                        "Npi",
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Npi_Stub,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Npi_ComputeIsReadOnly,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Npi_Validate,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Npi_GetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Npi_SetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Npi_OnValueChanged);
                private static void _Npi_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Practice.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<long>>.Data> c, global::LightSwitchApplication.Practice.DetailsClass d, object sf)
                {
                    c(d, ref d._Npi, sf);
                }
                private static bool _Npi_ComputeIsReadOnly(global::LightSwitchApplication.Practice e)
                {
                    bool result = false;
                    e.Npi_IsReadOnly(ref result);
                    return result;
                }
                private static void _Npi_Validate(global::LightSwitchApplication.Practice e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Npi_Validate(r);
                }
                private static global::System.Nullable<long> _Npi_GetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d)
                {
                    return d.ImplementationEntity.Npi;
                }
                private static void _Npi_SetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d, global::System.Nullable<long> v)
                {
                    d.ImplementationEntity.Npi = v;
                }
                private static void _Npi_OnValueChanged(global::LightSwitchApplication.Practice e)
                {
                    e.Npi_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<int>>.Entry
                    Tin = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<int>>.Entry(
                        "Tin",
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Tin_Stub,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Tin_ComputeIsReadOnly,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Tin_Validate,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Tin_GetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Tin_SetImplementationValue,
                        global::LightSwitchApplication.Practice.DetailsClass.PropertySetProperties._Tin_OnValueChanged);
                private static void _Tin_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Practice.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<int>>.Data> c, global::LightSwitchApplication.Practice.DetailsClass d, object sf)
                {
                    c(d, ref d._Tin, sf);
                }
                private static bool _Tin_ComputeIsReadOnly(global::LightSwitchApplication.Practice e)
                {
                    bool result = false;
                    e.Tin_IsReadOnly(ref result);
                    return result;
                }
                private static void _Tin_Validate(global::LightSwitchApplication.Practice e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Tin_Validate(r);
                }
                private static global::System.Nullable<int> _Tin_GetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d)
                {
                    return d.ImplementationEntity.Tin;
                }
                private static void _Tin_SetImplementationValue(global::LightSwitchApplication.Practice.DetailsClass d, global::System.Nullable<int> v)
                {
                    d.ImplementationEntity.Tin = v;
                }
                private static void _Tin_OnValueChanged(global::LightSwitchApplication.Practice e)
                {
                    e.Tin_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, int>.Data _Id;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data _Name;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data _Address1;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data _Address2;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data _City;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data _State;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, string>.Data _Country;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<long>>.Data _Npi;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Practice, global::LightSwitchApplication.Practice.DetailsClass, global::System.Nullable<int>>.Data _Tin;
            
        }
    
        #endregion
    }
    
    #endregion
}
